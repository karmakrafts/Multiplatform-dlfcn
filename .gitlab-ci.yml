stages:
  - test
  - publish
  - release

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - .kotlin

test-linux:
  stage: test
  before_script:
    - export JAVA_HOME=/home/sdks/zulu-17
  script:
    - ./gradlew
      clean
      linuxX64Test
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - linux

test-macos:
  stage: test
  before_script:
    - export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
  script:
    - ./gradlew
      clean
      macosArm64Test
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - macos

test-windows:
  stage: test
  script:
    - ./gradlew
      clean
      mingwX64Test
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - windows

publish-linux:
  stage: publish
  before_script:
    - export JAVA_HOME=/home/sdks/zulu-17
  script:
    - ./gradlew
      -DpublishDocs.root=/var/www/docs/multiplatform-dlfcn
      clean
      publish
      publishDocs
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - linux

publish-macos:
  stage: publish
  before_script:
    - export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
  script:
    - ./gradlew
      clean
      publish{MacosX64,MacosArm64}PublicationToGitlabRepository
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - macos

create-release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    tag_name: '$(stoml gradle/libs.versions.toml multiplatformDlfcn).$CI_PIPELINE_IID'
    description: '$(stoml gradle/libs.versions.toml multiplatformDlfcn).$CI_PIPELINE_IID'
    ref: '$CI_COMMIT_SHA'
  tags:
    - linux